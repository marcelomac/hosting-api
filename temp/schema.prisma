// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prompt Copilot para formatar models:
// para cada atributo dentro de cada model faça o seguinte: remova todos os espaços em branco; acrescente ":" após o nome da propriedade; transforme o tipo em lowercase; remova todo conteúdo após o tipo da propriedade; se o nome da propriedade iniciar com letra maiúscula exclua a propriedade e o seu tipo;

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Moviment {
  id             String        @id @default(cuid())
  number         String        @unique
  employeeId     String
  departmentId   String?
  relationshipId String?
  ordinanceId    String?
  movimentType   String
  date           DateTime
  origin         String
  annotation     String?
  status         String // pending, revised, gen_script,success_script, erro_script,  sent_email, cancelled
  statusDate     DateTime      @default(now())
  compliance     Boolean       @default(false) // concorda com o termo de uso (política de segurança)
  createdAt      DateTime      @default(now())
  Employee       Employee      @relation(fields: [employeeId], references: [id], onDelete: Restrict)
  Relationship   Relationship? @relation(fields: [relationshipId], references: [id], onDelete: Restrict)
  Department     Department?   @relation(fields: [departmentId], references: [id], onDelete: Restrict)
  Ordinance      Ordinance?    @relation(fields: [ordinanceId], references: [id], onDelete: Restrict)
  Script         Script[]
  Email          Email[]
}

model Employee {
  id        String     @id @default(cuid())
  name      String
  cpf       String     @unique
  login     String?
  sex       String
  phone     String
  email     String
  password  String?
  birthdate DateTime?
  createdAt DateTime   @default(now())
  Moviment  Moviment[]
}

model Department {
  id            String     @id @default(cuid())
  name          String
  folderPath    String?
  description   String?
  instructions  String?
  phone         String?
  ldapGroupName String?
  ldapGroupOU   String?
  active        Boolean    @default(true)
  Moviment      Moviment[]
}

model Relationship {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  active               Boolean                @default(true)
  Moviment             Moviment[]
  ResourceRelationship ResourceRelationship[]
}

model Resource {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  active               Boolean                @default(true)
  Template             Template[]
  ResourceRelationship ResourceRelationship[]
}

model ResourceRelationship {
  id             String       @id @default(cuid())
  resourceId     String
  relationshipId String
  createdAt      DateTime     @default(now())
  Resource       Resource     @relation(fields: [resourceId], references: [id], onDelete: Restrict)
  Relationship   Relationship @relation(fields: [relationshipId], references: [id], onDelete: Restrict)
}

model User {
  id        String    @id @default(cuid())
  name      String
  login     String    @unique
  password  String?
  email     String    @unique
  role      String
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  Profile   Profile?
  UserLog   UserLog[]
}

model Profile {
  id              String  @id @default(cuid())
  theme           String
  avatarUrl       String
  openTableFilter Boolean @default(false)
  userId          String  @unique
  User            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Setting {
  id                                  String  @id @default(cuid())
  ordinanceStartDateConfig            String  @default("lastFetch") // lastFetch | fixed
  ordinanceStartDaysBefore            Int     @default(3)
  ordinanceSendEmailToIngress         Boolean @default(false)
  ordinanceSendEmailToDismissal       Boolean @default(false)
  ordinanceSendEmailToStartVacation   Boolean @default(false)
  ordinanceSendEmailToEndVacation     Boolean @default(false)
  ordinanceSendEmailToStartLicense    Boolean @default(false)
  ordinanceSendEmailToEndLicense      Boolean @default(false)
  ordinanceSendEmailToStartSuspension Boolean @default(false)
  ordinanceSendEmailToEndSuspension   Boolean @default(false)
  ordinanceSendEmailDestiny           String?
  movimentCreateToIngress             Boolean @default(false)
  movimentCreateToDismissal           Boolean @default(false)
  movimentCreateToStartVacation       Boolean @default(false)
  movimentCreateToEndVacation         Boolean @default(false)
  movimentCreateToStartLicense        Boolean @default(false)
  movimentCreateToEndLicense          Boolean @default(false)
  movimentCreateToStartSuspension     Boolean @default(false)
  movimentCreateToEndSuspension       Boolean @default(false)
  keywordsToIngress                   String? @default("")
  keywordsToDismissal                 String? @default("")
  keywordsToStartVacation             String? @default("")
  keywordsToEndVacation               String? @default("")
  keywordsToStartLicense              String? @default("")
  keywordsToEndLicense                String? @default("")
  keywordsToStartSuspension           String? @default("")
  keywordsToEndSuspension             String? @default("")
  scriptRemovePendingBeforeCreate     Boolean @default(false)
  scriptCreateAfterRevisedMoviment    Boolean @default(false)
  scriptExecuteRequestAfterCreate     Boolean @default(false)
  scriptExecuteWebscrapingAfterCreate Boolean @default(false)
  scriptExecuteCreateEmailAfterCreate Boolean @default(false)
  scriptExecuteEmailSendAfterCreate   Boolean @default(false)
  robotFetchOrdinanceActiveSchedule   Boolean @default(false)
  robotFetchOrdinanceScheduleContent  String?
  robotActionsActiveSchedule          Boolean @default(false)
  robotActionsScheduleContent         String?
}

model Ordinance {
  id             String     @id @default(cuid())
  publication    DateTime
  ordinanceType  String
  number         String     @unique
  content        String
  status         String     @default("pending") //pending, ignored, mov_generated
  employeeName   String?
  departmentName String?
  createdAt      DateTime   @default(now())
  Moviment       Moviment[]
}

model Script {
  id            String   @id @default(cuid())
  movimentId    String
  templateId    String
  number        String   @unique
  scriptContent String
  emailContent  String?
  status        String // 'pending', 'success', 'error', 'cancelled'
  statusDate    DateTime
  scriptType    String // powershell-scrip | api-request | send-email | webscraping
  annotation    String?
  createdAt     DateTime @default(now())
  Moviment      Moviment @relation(fields: [movimentId], references: [id], onDelete: Restrict)
  Template      Template @relation(fields: [templateId], references: [id], onDelete: Restrict)
}

model Email {
  id         String    @id @default(cuid())
  movimentId String
  scriptId   String
  to         String
  cc         String?
  cco        String?
  subject    String
  preview    String?
  text       String?
  html       String
  sentAt     DateTime?
  status     String // 'pending', 'sent', 'error', 'cancelled'
  uniqueKey  String    @unique
  createdAt  DateTime  @default(now())
  Moviment   Moviment  @relation(fields: [movimentId], references: [id], onDelete: Restrict)
}

model Template {
  id            String   @id @default(cuid())
  name          String
  order         Int
  resourceId    String
  movimentType  String
  scriptType    String
  scriptContent String
  emailContent  String?
  sendEmail     Boolean  @default(false)
  createdAt     DateTime @default(now())
  Script        Script[]
  Resource      Resource @relation(fields: [resourceId], references: [id], onDelete: Restrict)
}

model UserLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  message   String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Restrict)
}

model SysLog {
  id        String   @id @default(cuid())
  action    String
  message   String
  file      String
  createdAt DateTime @default(now())
}
